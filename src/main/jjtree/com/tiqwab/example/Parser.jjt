// --- Options ---

options {
    VISITOR = true;
    MULTI = true;
    STATIC = false;
    NODE_CLASS = "ASTNodeBase";
    JAVA_UNICODE_ESCAPE = true;
    UNICODE_INPUT = true;
}

// --- Definition of parser ---

PARSER_BEGIN (Parser)

package com.tiqwab.example;

import com.tiqwab.example.jbc.*;

public class Parser {
}
PARSER_END (Parser)

// --- Definition of tokens ---

// White space
SKIP: {
    " "
    | "\t"
    | "\r"
    | "\f"
}

TOKEN: {
    < NEWLINE: "\n" >
}

// Operator
TOKEN: {
    < ADD: "+" >
    | < SUBTRACT: "-" >
    | < MULT: "*" >
    | < DIV: "/" >
}

// Symbols
TOKEN: {
    < LPAREN: "(" >
    | < RPAREN: ")" >
    | < ASSIGN: "=" >
}

// Type modifier
// This declaration must appear before Id.
TOKEN: {
    < TYPE: "int" | "float" >
    | < VOID: "void" >
}

// Id
TOKEN: {
    < ID: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "_", "0"-"9"])* >
}

// Number
TOKEN: {
    < INTEGER: (["0"-"9"])+ >
    | < FLOAT: (["0"-"9"])*"."(["0"-"9"])+ >
}

// --- Translation Scheme ---

// S -> S'+
// S' -> <TYPE> <ID> "=" E | E
// E -> T ("+" T | "-" T)*
// T -> F ("*" T | "/" F)*
// F -> <INTEGER> | <FLOAT> | "(" E ")" | <ID>

SimpleNode Start(): {
    JBCNode stmts;
} {
    // TODO: <EOF> not <NEWLINE>
    stmts = Statements() <NEWLINE> {
        jjtThis.setJbcNode(stmts);
        return jjtThis;
    }
}

JBCNode Statements(): {
    JBCNode stmt;
    JBCSeq seq;
} {
    stmt = Statement() {
        seq = new JBCSeq((JBCStmt) stmt);
        jjtThis.setJbcNode(seq);
    } (
        stmt = Statement() {
            seq.setTail(new JBCSeq((JBCStmt) stmt));
            seq = seq.getTail();
        }
    )* {
        return jjtThis.getJbcNode();
    }
}

JBCNode Statement(): {
    Token id;
    Token type;
    JBCNode expression;
} {
    (
        expression = Expression() <NEWLINE> {
            jjtThis.setJbcNode(new JBCEval((JBCExpr) expression));
        }
        |
        type = <TYPE> id = <ID> <ASSIGN> expression = Expression() <NEWLINE> {
            jjtThis.setJbcNode(new JBCAssign(id.image, type.image, (JBCExpr) expression));
        }
    ) {
        return jjtThis.getJbcNode();
    }
}

JBCNode Expression(): {
    JBCNode term1;
    JBCNode term2;
} {
    term1 = Term() { jjtThis.setJbcNode(term1); } (
        <ADD> term2 = Term() {
            jjtThis.setJbcNode(new JBCBinaryOperator("+", (JBCExpr) jjtThis.getJbcNode(), (JBCExpr) term2));
        }
        | <SUBTRACT> term2 = Term() {
            jjtThis.setJbcNode(new JBCBinaryOperator("-", (JBCExpr) jjtThis.getJbcNode(), (JBCExpr) term2));
        }
    )* {
        return jjtThis.getJbcNode();
    }
}

JBCNode Term(): {
    JBCNode factor1;
    JBCNode factor2;
} {
    factor1 = Factor() { jjtThis.setJbcNode(factor1); } ( 
        <MULT> factor2 = Factor() {
            jjtThis.setJbcNode(new JBCBinaryOperator("*", (JBCExpr) jjtThis.getJbcNode(), (JBCExpr) factor2));
        }
        | <DIV> factor2 = Factor() {
            jjtThis.setJbcNode(new JBCBinaryOperator("/", (JBCExpr) jjtThis.getJbcNode(), (JBCExpr) factor2));
        }
    )* {
        return jjtThis.getJbcNode();
    }
}

JBCNode Factor(): {
    Token number;
    Token id;
    JBCNode expr;
} {
    number = <INTEGER> {
        jjtThis.setJbcNode(new JBCInteger(number.image));
        return jjtThis.getJbcNode();
    }
    | number = <FLOAT> {
        jjtThis.setJbcNode(new JBCFloat(number.image));
        return jjtThis.getJbcNode();
    }
    | <LPAREN> expr = Expression() <RPAREN> {
        jjtThis.setJbcNode(expr);
        return expr;
    }
    | id = <ID> {
        jjtThis.setJbcNode(new JBCId(id.image));
        return jjtThis.getJbcNode();
    }
}
