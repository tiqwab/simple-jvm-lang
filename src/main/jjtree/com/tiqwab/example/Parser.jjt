// --- Options ---

options {
    VISITOR = true;
    MULTI = true;
    STATIC = false;
    NODE_CLASS = "ASTNodeBase";
    JAVA_UNICODE_ESCAPE = true;
    UNICODE_INPUT = true;
}

// --- Definition of parser ---

PARSER_BEGIN (Parser)

package com.tiqwab.example;

import com.tiqwab.example.jbc.*;

public class Parser {
}
PARSER_END (Parser)

// --- Definition of tokens ---

// White space
SKIP: {
    " "
    | "\t"
    | "\r"
    | "\f"
    | "\n"
}

// Unary operator
TOKEN: {
    < NOT: "!" >
}

// Binary operator
TOKEN: {
    < ADD: "+" >
    | < SUBTRACT: "-" >
    | < MULT: "*" >
    | < DIV: "/" >
    | < EQ: "==" >
    | < LT: "<" >
    | < AND: "&&" >
}

// Symbols
TOKEN: {
    < LPAREN: "(" >
    | < RPAREN: ")" >
    | < LBRACE: "{" >
    | < RBRACE: "}" >
    | < ASSIGN: "=" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < WHILE: "while" >
}

// Type modifier
// This declaration must appear before Id.
TOKEN: {
    < TYPE: "int" | "float" | "bool" >
    | < VOID: "void" >
}

// Number
TOKEN: {
    < INTEGER: (["0"-"9"])+ >
    | < FLOAT: (["0"-"9"])*"."(["0"-"9"])+ >
}

// Bool
TOKEN: {
    < TRUE: "true" >
    | <FALSE: "false" >
}

// Id
TOKEN: {
    < ID: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "_", "0"-"9"])* >
}

// --- Translation Scheme ---

// S -> S'+
// S' -> <TYPE> <ID> "=" L | <IF> "(" L ")" S' <ELSE> S' | <IF> "(" L ")" "{" S "}" <ELSE> "{" S "}"
//     | <WHILE> "(" L ")" "{" S "}" | L
// L -> R | R "&&" R
// R -> E | E "<" E | E "==" E
// E -> T ("+" T | "-" T)*
// T -> F ("*" T | "/" F)*
// F -> <INTEGER> | <FLOAT> | "(" R ")" | <ID> | <TRUE> | <FALSE> | "!" F

SimpleNode Start(): {
    JBCNode stmts;
} {
    stmts = Statements() <EOF> {
        jjtThis.setJbcNode(stmts);
        return jjtThis;
    }
}

JBCNode Statements(): {
    JBCNode stmt;
    JBCSeq seq;
} {
    stmt = Statement() {
        seq = new JBCSeq((JBCStmt) stmt);
        jjtThis.setJbcNode(seq);
    } (
        stmt = Statement() {
            JBCSeq tmp = new JBCSeq((JBCStmt) stmt);
            seq.setTail(tmp);
            seq = tmp;
        }
    )* {
        jjtThis.setJbcNode(new JBCBlock((JBCStmt) jjtThis.getJbcNode()));
        return jjtThis.getJbcNode();
    }
}

JBCNode Statement(): {
    Token id;
    Token type = null;
    JBCNode logic;
    JBCNode statement1;
    JBCNode statement2;
} {
    (
        LOOKAHEAD(2)
        (type = <TYPE>)? id = <ID> <ASSIGN> logic = Logic() {
            jjtThis.setJbcNode(new JBCAssign(id.image, (type != null ? type.image : null), (JBCExpr) logic));
        }
        |
        logic = Logic() {
            jjtThis.setJbcNode(new JBCEval((JBCExpr) logic));
        }
        |
        <IF> <LPAREN> logic = Logic() <RPAREN>
        (
            ( statement1 = Statement() <ELSE> statement2 = Statement() {
                jjtThis.setJbcNode(new JBCIf((JBCExpr) logic, (JBCStmt) statement1, (JBCStmt) statement2));
            })
            |
            ( <LBRACE> statement1 = Statements() <RBRACE> <ELSE> <LBRACE> statement2 = Statements() <RBRACE> {
                jjtThis.setJbcNode(new JBCIf((JBCExpr) logic, (JBCStmt) statement1, (JBCStmt) statement2));
            })
        )
        |
        <WHILE> <LPAREN> logic = Logic() <RPAREN> <LBRACE> statement1 = Statements() <RBRACE> {
            jjtThis.setJbcNode(new JBCWhile((JBCExpr) logic, (JBCStmt) statement1));
        }
    ) {
        return jjtThis.getJbcNode();
    }
}

JBCNode Logic(): {
    JBCNode rel1;
    JBCNode rel2;
} {
    rel1 = Rel() { jjtThis.setJbcNode(rel1); }
    (
        <AND> rel2 = Rel() {
            jjtThis.setJbcNode(new JBCLogicalOperator("&&", (JBCExpr) rel1, (JBCExpr) rel2));
        }
    )? {
        return jjtThis.getJbcNode();
    }
}

JBCNode Rel(): {
    JBCNode expression1;
    JBCNode expression2;
} {
    expression1 = Expression() { jjtThis.setJbcNode(expression1); }
    (
        <EQ> expression2 = Expression() {
            jjtThis.setJbcNode(new JBCRelOperator("==", (JBCExpr) expression1, (JBCExpr) expression2));
        }
        |
        <LT> expression2 = Expression() {
            jjtThis.setJbcNode(new JBCRelOperator("<", (JBCExpr) expression1, (JBCExpr) expression2));
        }
    )? {
        return jjtThis.getJbcNode();
    }
}

JBCNode Expression(): {
    JBCNode term1;
    JBCNode term2;
} {
    term1 = Term() { jjtThis.setJbcNode(term1); } (
        <ADD> term2 = Term() {
            jjtThis.setJbcNode(new JBCBinaryOperator("+", (JBCExpr) jjtThis.getJbcNode(), (JBCExpr) term2));
        }
        | <SUBTRACT> term2 = Term() {
            jjtThis.setJbcNode(new JBCBinaryOperator("-", (JBCExpr) jjtThis.getJbcNode(), (JBCExpr) term2));
        }
    )* {
        return jjtThis.getJbcNode();
    }
}

JBCNode Term(): {
    JBCNode factor1;
    JBCNode factor2;
} {
    factor1 = Factor() { jjtThis.setJbcNode(factor1); } ( 
        <MULT> factor2 = Factor() {
            jjtThis.setJbcNode(new JBCBinaryOperator("*", (JBCExpr) jjtThis.getJbcNode(), (JBCExpr) factor2));
        }
        | <DIV> factor2 = Factor() {
            jjtThis.setJbcNode(new JBCBinaryOperator("/", (JBCExpr) jjtThis.getJbcNode(), (JBCExpr) factor2));
        }
    )* {
        return jjtThis.getJbcNode();
    }
}

JBCNode Factor(): {
    Token number;
    Token bool;
    Token id;
    JBCNode expr;
    JBCNode factor;
} {
    number = <INTEGER> {
        jjtThis.setJbcNode(new JBCInteger(number.image));
        return jjtThis.getJbcNode();
    }
    | number = <FLOAT> {
        jjtThis.setJbcNode(new JBCFloat(number.image));
        return jjtThis.getJbcNode();
    }
    | <LPAREN> expr = Rel() <RPAREN> {
        jjtThis.setJbcNode(expr);
        return expr;
    }
    | bool = <TRUE> {
        jjtThis.setJbcNode(new JBCTrue());
        return jjtThis.getJbcNode();
    }
    | bool = <FALSE> {
        jjtThis.setJbcNode(new JBCFalse());
        return jjtThis.getJbcNode();
    }
    | <NOT> factor = Factor() {
        jjtThis.setJbcNode(new JBCNot((JBCExpr) factor));
        return jjtThis.getJbcNode();
    }
    | id = <ID> {
        jjtThis.setJbcNode(new JBCId(id.image));
        return jjtThis.getJbcNode();
    }
}
