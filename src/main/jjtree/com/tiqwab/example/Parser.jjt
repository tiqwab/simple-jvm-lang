// --- Options ---

options {
    VISITOR = true;
    MULTI = true;
    STATIC = false;
    NODE_CLASS = "ASTNodeBase";
    JAVA_UNICODE_ESCAPE = true;
    UNICODE_INPUT = true;
}

// --- Definition of parser ---

PARSER_BEGIN (Parser)

package com.tiqwab.example;

import com.tiqwab.example.jbc.*;

public class Parser {
}
PARSER_END (Parser)

// --- Definition of tokens ---

// White space
SKIP: {
    " "
    | "\t"
    | "\r"
    | "\f"
}

TOKEN: {
    < NEWLINE: "\n" >
}

// Operator
TOKEN: {
    < ADD: "+" >
    | < SUBTRACT: "-" >
    | < MULT: "*" >
    | < DIV: "/" >
}

// Symbols
TOKEN: {
    < LPAREN: "(" >
    | <RPAREN: ")" >
}

// Number
TOKEN: {
    < NUMBER: (["0"-"9"])+ >
}

// --- Translation Scheme ---

// E -> T ("+" T | "-" T)*
// T -> F ("*" T | "/" F)*
// F -> N | "(" E ")"

SimpleNode Start(): {
    JBCNode expression;
} {
    expression = Expression() <NEWLINE> {
        jjtThis.setJbcNode(new JBCEval((JBCExpr) expression));
        return jjtThis;
    }
}

JBCNode Expression(): {
    JBCNode term1;
    JBCNode term2;
} {
    term1 = Term() { jjtThis.setJbcNode(term1); } (
        <ADD> term2 = Term() {
            jjtThis.setJbcNode(new JBCBinaryOperator("+", jjtThis.getJbcNode(), term2));
        }
        | <SUBTRACT> Term()
    )* {
        return jjtThis.getJbcNode();
    }
}

JBCNode Term(): {
    JBCNode factor1;
    JBCNode factor2;
} {
    factor1 = Factor() { jjtThis.setJbcNode(factor1); } ( 
        <MULT> factor2 = Factor() {
            jjtThis.setJbcNode(new JBCBinaryOperator("*", jjtThis.getJbcNode(), factor2));
        }
        | <DIV> Factor()
    )* {
        return jjtThis.getJbcNode();
    }
}

JBCNode Factor(): {
    Token number;
} {
    number = <NUMBER> {
        jjtThis.setJbcNode(new JBCInteger(number.image));
        return jjtThis.getJbcNode();
    }
    | <LPAREN> Expression() <RPAREN> {
        return null;
    }
}
